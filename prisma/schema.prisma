// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// tables/Users.prisma

model Users {
  user_id            Int      @id @default(autoincrement())
  username          String
  email             String   @unique
  password          String
  registration_date DateTime    @default(now())
  last_login_date   DateTime    @default(now())
  account_status    String
  addresses         Address[]
  ratings           Rating[]
  shoppingCarts     ShoppingCart[]
  orders            Order[]
  productsAsSeller Products[]
  socialMedia       SocialMedia[]
  userType             UserType?
}


model Address {
  address_id      Int      @id @default(autoincrement())
  user_id         Int
  address_type    String
  street_address  String
  city            String
  country         String
  contact_number  String
  user            Users    @relation(fields: [user_id], references: [user_id])
}


model UserType {
  user_type_id    Int   @id @default(autoincrement())
  user_id     Int   @unique
  user        Users @relation(fields: [user_id], references: [user_id])
  other_user_detail String?
}


model OrderItem {
  order_item_id  Int       @id @default(autoincrement())
  order_id       Int
  product_id     Int
  quantity       Int
  order          Order     @relation(fields: [order_id], references: [order_id])
  product        Products  @relation(fields: [product_id], references: [product_id])
}


model Order {
  order_id      Int       @id @default(autoincrement())
  user_id       Int
  order_date    DateTime
  total_amount  Float
  order_status  String
  user          Users     @relation(fields: [user_id], references: [user_id])
  orderItems    OrderItem[]
}


model ProductImage {
  image_id    Int     @id @default(autoincrement())
  product_id  Int
  image_url   String
  product     Products @relation(fields: [product_id], references: [product_id])
}


model Products {
  product_id            Int      @id @default(autoincrement())
  product_name          String
  description           String
  price                 Float
  seller_id             Int
  optional_video_url    String?
  other_product_details String?
  seller                Users        @relation(fields: [seller_id], references: [user_id])
  shoppingCarts         ShoppingCart[]
  productImages         ProductImage[]
  productVideos         ProductVideo?
  ratings               Rating[]
  orderItems            OrderItem[]
}


model ProductVideo {
  video_id    Int     @id @default(autoincrement())
  product_id  Int     @unique
  video_url   String
  product     Products? @relation(fields: [product_id], references: [product_id])
}


model Rating {
  rating_id     Int     @id @default(autoincrement())
  user_id       Int
  product_id    Int
  rating_value  Int
  comment       String?
  user          Users   @relation(fields: [user_id], references: [user_id])
  product       Products @relation(fields: [product_id], references: [product_id])
}


model ShoppingCart {
  cart_id      Int       @id @default(autoincrement())
  user_id      Int
  product_id   Int
  quantity     Int
  user         Users     @relation(fields: [user_id], references: [user_id])
  product      Products  @relation(fields: [product_id], references: [product_id])
}


model SocialMedia {
  social_media_id    Int     @id @default(autoincrement())
  user_id            Int     @unique
  social_media_type  String
  social_media_user_id String
  user               Users   @relation(fields: [user_id], references: [user_id])
}

